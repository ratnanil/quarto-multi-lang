[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Multi-languages Websites with Quarto!",
    "section": "",
    "text": "This website implements quarto with 2 languages. Currently, you are looking at the english version.\nTo use multi language support, I make use of quarto profiles. Some ideas are from here.\nCurrent approach\n\nCreate profiles for each language: en / de. Each has its own YAML file: _quarto-en.yml and quarto-de.yml. In these yaml files, specify the language and the menu items for each language:\n\n\n\nquarto-en.yml\"\n\nlang: en\n\nwebsite:\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: about.qmd\n        text: \"About\"\n  title: \"Multi-languages Websites with Quarto!\"\n\n\n\nquarto-en.yml\"\n\n\nwebsite:\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: about.qmd\n        text: \"Infos\"\n  title: \"Mehrsprachige Websiten mit Quarto!\"\n\n\nSpecify a default profile using groups. The default language is rendered to docs, the other language is rendered to a subdir of docs. Add a navbar item (right) to switch to the other language\n\n\n\nquarto-en.yml\"\n\nproject:\n  output-dir: docs\n  \n  \nwebsite:\n  navbar:\n    right:\n      - href: de\n        text: üåç Auf Deutsch wechseln\n\n\n\nquarto-en.yml\"\n\nproject:\n  output-dir: docs/de\n  \nwebsite:\n  navbar:\n    right:\n      - href: ../\n        text: üåç Switch to English\n\n\nConditionally show content on each page using divs with the .content-visible when-profile=\"de\" syntax\n\n:::{.content-visible when-profile=\"de\"}\n\n## Deutsch\n\nDiese Website implementiert quarto mit 2 Sprachen. Derzeit sehen Sie die deutsche Version. Wie das ganze funktioniert ist nur in der englischen Version sichtbar.\n\n:::\n\nTo render:\n\nIf possible, render the default profile first (quarto render) and the other second ((e.g.quarto render ‚Äìprofile de))\nIf you need to render the other language first, use --no-clean (quarto render --profile de --no-clean) to prefent docs from being purged first\n\nTo publish\n\nWe cannot use quarto publish, since this is this command is output-dir-aware. Instead, we specify docs to be the source for gh-pages on GitHub. The disadvantage is that you need to versioncontrol your html-files.\nNetlify would be an elegant solution with some overhead (create an netlify account, install the netlify-cli). Here you have the additional advantage of being able to use _redirects depending on the preferred user language in the browser settings.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAnything not in a conditional div is displayed in both language versions (like this callout block you are reading right now)"
  },
  {
    "objectID": "index.html#english",
    "href": "index.html#english",
    "title": "Multi-languages Websites with Quarto!",
    "section": "",
    "text": "This website implements quarto with 2 languages. Currently, you are looking at the english version.\nTo use multi language support, I make use of quarto profiles. Some ideas are from here.\nCurrent approach\n\nCreate profiles for each language: en / de. Each has its own YAML file: _quarto-en.yml and quarto-de.yml. In these yaml files, specify the language and the menu items for each language:\n\n\n\nquarto-en.yml\"\n\nlang: en\n\nwebsite:\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: about.qmd\n        text: \"About\"\n  title: \"Multi-languages Websites with Quarto!\"\n\n\n\nquarto-en.yml\"\n\n\nwebsite:\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: about.qmd\n        text: \"Infos\"\n  title: \"Mehrsprachige Websiten mit Quarto!\"\n\n\nSpecify a default profile using groups. The default language is rendered to docs, the other language is rendered to a subdir of docs. Add a navbar item (right) to switch to the other language\n\n\n\nquarto-en.yml\"\n\nproject:\n  output-dir: docs\n  \n  \nwebsite:\n  navbar:\n    right:\n      - href: de\n        text: üåç Auf Deutsch wechseln\n\n\n\nquarto-en.yml\"\n\nproject:\n  output-dir: docs/de\n  \nwebsite:\n  navbar:\n    right:\n      - href: ../\n        text: üåç Switch to English\n\n\nConditionally show content on each page using divs with the .content-visible when-profile=\"de\" syntax\n\n:::{.content-visible when-profile=\"de\"}\n\n## Deutsch\n\nDiese Website implementiert quarto mit 2 Sprachen. Derzeit sehen Sie die deutsche Version. Wie das ganze funktioniert ist nur in der englischen Version sichtbar.\n\n:::\n\nTo render:\n\nIf possible, render the default profile first (quarto render) and the other second ((e.g.quarto render ‚Äìprofile de))\nIf you need to render the other language first, use --no-clean (quarto render --profile de --no-clean) to prefent docs from being purged first\n\nTo publish\n\nWe cannot use quarto publish, since this is this command is output-dir-aware. Instead, we specify docs to be the source for gh-pages on GitHub. The disadvantage is that you need to versioncontrol your html-files.\nNetlify would be an elegant solution with some overhead (create an netlify account, install the netlify-cli). Here you have the additional advantage of being able to use _redirects depending on the preferred user language in the browser settings.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAnything not in a conditional div is displayed in both language versions (like this callout block you are reading right now)"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Multi-languages Websites with Quarto!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCurrently, we use github-pages without the gh-pages branch and without quarto publish because these functionalities don‚Äôt play well with nested output-dirs. So a simple setup is to use docs as the output-dir of the default language (e.g.¬†english) and docs/de for the secondary langauge (e.g.¬†german).‚Ü©Ô∏é"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Multi-languages Websites with Quarto!",
    "section": "",
    "text": "Here is some english text."
  },
  {
    "objectID": "Readme.html",
    "href": "Readme.html",
    "title": "Multi-languages Websites with Quarto!",
    "section": "",
    "text": "To use multi language support, I make use of quarto profiles.\nSome ideas are from here.\nCurrent approach\n\nWe create two profiles: en / de\nEach has its own YAML file: _quarto-en.yml and quarto-de.yml. In these yaml files, the output-dir is specified for each profile1\nWe specify a default profile using groups\nWe conditionally show content using divs with the .content-visible when-profile=\"en\" syntax\nTo Render, you must specify a profile (e.g.¬†--profile en). In the current setup (where en is in the docs root directory and de is in a subdirectory), you need to append --no-clean if en is run after de\nTo publish, you cannot use quarto publish anymore, since this is output-dir-aware. We could either use netlify with the netlify-cli or use gh-pages and version the output-dir. The latter method is very simple, ableit being not-so-elegant. Netlify would have the big advantage of redirects, see below.\nIf you use\n\nNetlify: In the root dir, specify a _redirects to direct users to one of the subsites (since the root is empty)\ngh-pages: create a redirects html pages"
  },
  {
    "objectID": "Readme.html#multilanguage-support-ende",
    "href": "Readme.html#multilanguage-support-ende",
    "title": "Multi-languages Websites with Quarto!",
    "section": "",
    "text": "To use multi language support, I make use of quarto profiles.\nSome ideas are from here.\nCurrent approach\n\nWe create two profiles: en / de\nEach has its own YAML file: _quarto-en.yml and quarto-de.yml. In these yaml files, the output-dir is specified for each profile1\nWe specify a default profile using groups\nWe conditionally show content using divs with the .content-visible when-profile=\"en\" syntax\nTo Render, you must specify a profile (e.g.¬†--profile en). In the current setup (where en is in the docs root directory and de is in a subdirectory), you need to append --no-clean if en is run after de\nTo publish, you cannot use quarto publish anymore, since this is output-dir-aware. We could either use netlify with the netlify-cli or use gh-pages and version the output-dir. The latter method is very simple, ableit being not-so-elegant. Netlify would have the big advantage of redirects, see below.\nIf you use\n\nNetlify: In the root dir, specify a _redirects to direct users to one of the subsites (since the root is empty)\ngh-pages: create a redirects html pages"
  },
  {
    "objectID": "Readme.html#footnotes",
    "href": "Readme.html#footnotes",
    "title": "Multi-languages Websites with Quarto!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCurrently, we use github-pages without the gh-pages branch and without quarto publish because these functionalities don‚Äôt play well with nested output-dirs. So a simple setup is to use docs as the output-dir of the default language (e.g.¬†english) and docs/de for the secondary langauge (e.g.¬†german).‚Ü©Ô∏é"
  }
]